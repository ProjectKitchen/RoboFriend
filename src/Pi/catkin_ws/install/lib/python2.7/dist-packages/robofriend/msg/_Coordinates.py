# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from robofriend/Coordinates.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class Coordinates(genpy.Message):
  _md5sum = "be7c1e838538f5e60d0dc085dffee546"
  _type = "robofriend/Coordinates"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """uint16 y_top
uint16 right
uint16 bottom
uint16 x_left
string face_name
"""
  __slots__ = ['y_top','right','bottom','x_left','face_name']
  _slot_types = ['uint16','uint16','uint16','uint16','string']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       y_top,right,bottom,x_left,face_name

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Coordinates, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.y_top is None:
        self.y_top = 0
      if self.right is None:
        self.right = 0
      if self.bottom is None:
        self.bottom = 0
      if self.x_left is None:
        self.x_left = 0
      if self.face_name is None:
        self.face_name = ''
    else:
      self.y_top = 0
      self.right = 0
      self.bottom = 0
      self.x_left = 0
      self.face_name = ''

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_4H().pack(_x.y_top, _x.right, _x.bottom, _x.x_left))
      _x = self.face_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 8
      (_x.y_top, _x.right, _x.bottom, _x.x_left,) = _get_struct_4H().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.face_name = str[start:end].decode('utf-8')
      else:
        self.face_name = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_4H().pack(_x.y_top, _x.right, _x.bottom, _x.x_left))
      _x = self.face_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 8
      (_x.y_top, _x.right, _x.bottom, _x.x_left,) = _get_struct_4H().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.face_name = str[start:end].decode('utf-8')
      else:
        self.face_name = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_4H = None
def _get_struct_4H():
    global _struct_4H
    if _struct_4H is None:
        _struct_4H = struct.Struct("<4H")
    return _struct_4H
