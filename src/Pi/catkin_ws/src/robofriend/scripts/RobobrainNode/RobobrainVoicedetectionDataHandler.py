from RobobrainStateHandler import *
from time import *
import rospy
import Queue

#from urllib.request import urlopen     # python3
from urllib2 import urlopen             # python2

# import ros services
from robofriend.srv import SrvVoiceHotwordActivationData

# import ros messages
from robofriend.msg import SpeechData
from robofriend.msg import VoiceData
from robofriend.msg import LedEarsData

class RobobrainVoicedetectionDataHandler():

    def __init__(self, queue):
        self._keyboard_queue = queue
        self._voice_hotword_request = rospy.ServiceProxy('/robofriend/voicehotword', SrvVoiceHotwordActivationData)
        self._elapse_time = 20
        self._intent = ""
        self._slot = ""

        # init publishers
        self._pub_speech = rospy.Publisher('/robofriend/speech_data', SpeechData, queue_size = 10)
        self._msg_speech = SpeechData()

        self._pub_led_ears = rospy.Publisher('/robofriend/led_ears_data', LedEarsData, queue_size = 10)
        self._msg_led_ears = LedEarsData()

    def process_data(self, data):
        rospy.logwarn("{%s} -  process_data : Message received from Voice Detection Node: %s",
            self.__class__.__name__, data)
        self._intent = data.intent
        self._slot = data.slot

        self._input_handler(data)

    def _start_voiceinteraction(self, prev_mode, face_familiarity, person_detected):
        cnt = 0
        while cnt < 2:
            self._publish_led_ears_message(rgb_color = [0, 15, 0])
            cnt += 1
            sleep(1.1)
        if face_familiarity != "unknown" and face_familiarity != None and face_familiarity != 'no_person':
            self._publish_speech_message("custom", "Da wir uns kennen hast du die volle kontrolle uber mein zu Hause")
        else:
            self._publish_speech_message("custom", "Ich uberlasse dir die Kontrolle meiner Wohnung! ")
        self._smart_home_interaction()

    def _smart_home_interaction(self):
        yes_no = None

        while yes_no is not False:
            self._publish_speech_message("custom", "Was mochtest du in meiner Wohnunng steuern")
            sleep(3)
            response = self._voice_hotword_request(True)
            if response.response is True:
                rospy.logdebug("Response is True")
                self._evaluate_voice_inputs()
            sleep(1)
            self._publish_speech_message("custom", "Mochtest du weiter machen tippe ja oder nein ein")
            sleep(3)
            yes_no = self._yes_no_keyboard_request()


    def _evaluate_voice_inputs(self):
        try:
            vc_input = rospy.wait_for_message('/robofriend/voice_data', VoiceData, timeout = self._elapse_time)
            rospy.logdebug("{%s} - evaluate_voice_inputs : Received message: %s", self.__class__.__name__, vc_input)
            start_time = self._time_request()
            if vc_input.enough_slots is False:
                self._publish_speech_message("custom", "Ich habe dich nicht verstanden")
            else:
                if vc_input.intent == "lights":
                    sep_mes = vc_input.slots.split("/")
                    if sep_mes[1] == "on":
                        if sep_mes[0] == "living room":
                            rospy.logdebug("Living room lights on!")
                            urlopen("http://172.22.0.166:8081/rest/runtime/model/components/67-111-109-109-97-110-100-73-110-112-117-116-/ports/105-110-/data/64-75-78-88-58-49-49-47-48-47-48-44-49-46-48-48-49-44-111-110-")
                        elif sep_mes[0] == "kitchen":
                            rospy.logdebug("Kitchen lights on!")
                            urlopen("http://172.22.0.166:8081/rest/runtime/model/components/67-111-109-109-97-110-100-73-110-112-117-116-/ports/105-110-/data/64-75-78-88-58-49-49-47-48-47-56-44-49-46-48-48-49-44-111-110-")
                    elif sep_mes[1] == "off":
                        if sep_mes[0] == "living room":
                            rospy.logdebug("Living room lights off!")
                            urlopen("http://172.22.0.166:8081/rest/runtime/model/components/67-111-109-109-97-110-100-73-110-112-117-116-/ports/105-110-/data/64-75-78-88-58-49-49-47-48-47-48-44-49-46-48-48-49-44-111-102-102-")
                        elif sep_mes[0] == "kitchen":
                            rospy.logdebug("Kitchen lights off!")
                            urlopen("http://172.22.0.166:8081/rest/runtime/model/components/67-111-109-109-97-110-100-73-110-112-117-116-/ports/105-110-/data/64-75-78-88-58-49-49-47-48-47-56-44-49-46-48-48-49-44-111-102-102-")

                ################################ TV ################################
                elif vc_input.intent == "tv":
                    sep_mes = vc_input.slots.split("/")
                    if sep_mes[0] == "living room":
                        if sep_mes[1] == "channel_up":
                            rospy.logdebug("Living room tv channel up!")
                            urlopen("http://172.22.0.166:8081/rest/runtime/model/components/67-111-109-109-97-110-100-73-110-112-117-116-/ports/105-110-/data/73-82-84-82-65-78-83-45-85-83-66-64-73-82-84-82-65-78-83-58-115-110-100-104-101-120-32-72-53-69-48-49-48-48-48-48-48-48-48-48-51-50-50-54-48-51-48-48-69-52-48-48-51-70-48-48-65-68-50-53-48-52-48-48-48-48-48-48-48-48-48-48-48-48-48-48-48-48-48-49-66-48-48-48-50-70-48-48-51-48-48-48-50-70-48-48-48-48-48-48-48-48-48-48-48-48-48-48-48-48-48-51-56-050-56-52-53-51-51-48-51-49-51-48-51-48-51-48-51-48-51-48-51-48-51-48-51-48-51-48-51-48-51-48-51-49-51-48-51-48-51-48-51-48-51-48-51-48-51-48-51-48-51-48-51-49-51-48-51-48-51-48-51-48-51-48-51-48-51-48-51-48-51-48-51-48-51-49-51-48-51-49-51-49-51-48-51-48-51-48-51-48-51-49-51-48-51-49-51-49-51-48-51-49-51-48-")
                        elif sep_mes[1] == "channel_down":
                            rospy.logdebug("Living room tv channel down!")
                            urlopen("http://172.22.0.166:8081/rest/runtime/model/components/67-111-109-109-97-110-100-73-110-112-117-116-/ports/105-110-/data/73-82-84-82-65-78-83-45-85-83-66-64-73-82-84-82-65-78-83-58-115-110-100-104-101-120-32-72-53-69-48-49-48-48-48-48-48-48-48-48-51-50-50-54-48-51-48-48-69-52-48-48-51-69-48-48-65-66-50-53-48-52-48-48-48-48-48-48-48-48-48-48-48-48-48-48-48-48-48-49-66-48-48-48-50-70-48-48-51-49-48-48-51-48-48-48-48-48-48-48-48-48-48-48-48-48-48-48-48-48-48-51-56-50-56-53-53-51-51-48-51-49-51-48-51-48-51-48-51-48-51-48-51-48-51-48-51-48-51-48-51-48-51-48-51-49-51-48-51-48-51-48-51-48-51-48-51-48-51-48-51-48-51-48-51-49-51-48-51-48-51-48-51-48-51-48-51-48-51-48-51-48-51-49-51-48-51-49-51-48-51-49-51-49-51-48-51-48-51-49-51-48-51-49-51-48-51-49-51-49-51-48-51-49-51-48-")
                        elif sep_mes[1] == "volume_up":
                            rospy.logdebug("Living room tv volume up!")
                            urlopen("http://172.22.0.166:8081/rest/runtime/model/components/67-111-109-109-97-110-100-73-110-112-117-116-/ports/105-110-/data/73-82-84-82-65-78-83-45-85-83-66-64-73-82-84-82-65-78-83-58-115-110-100-104-101-120-32-72-53-69-48-49-48-48-48-48-48-48-48-48-51-50-50-54-48-51-48-48-69-51-48-48-52-50-48-48-65-68-50-53-48-53-48-48-48-48-48-48-48-48-48-48-48-48-48-48-48-48-48-49-66-49-48-48-51-48-48-48-50-68-48-48-51-48-48-48-48-48-48-48-48-48-48-48-48-48-48-48-48-48-48-51-56-50-56-50-53-51-51-48-51-49-51-48-51-48-51-48-51-48-51-48-51-48-51-48-51-48-51-48-51-48-51-48-51-49-51-48-51-48-51-48-51-48-51-48-51-48-51-48-51-48-51-48-51-49-51-48-51-48-51-48-51-48-51-48-51-48-51-48-51-48-51-48-51-48-51-48-51-48-51-48-51-49-51-48-51-48-51-48-51-48-51-48-51-48-51-48-51-49-51-48-51-49-51-48-")
                        elif sep_mes[1] == "volume_down":
                            rospy.logdebug("Living room tv volume down!")
                            urlopen("http://172.22.0.166:8081/rest/runtime/model/components/67-111-109-109-97-110-100-73-110-112-117-116-/ports/105-110-/data/73-82-84-82-65-78-83-45-85-83-66-64-73-82-84-82-65-78-83-58-115-110-100-104-101-120-32-72-53-69-48-49-48-48-48-48-48-48-48-48-51-50-50-54-48-51-48-48-69-52-48-48-51-69-48-48-65-67-50-53-48-53-48-48-48-48-48-48-48-48-48-48-48-48-48-48-48-48-48-49-66-48-48-48-51-48-48-48-51-48-48-48-51-48-48-48-48-48-48-48-48-48-48-48-48-48-48-48-48-48-48-51-56-51-56-50-53-51-51-48-51-49-51-48-51-48-51-48-51-48-51-48-51-48-51-48-51-48-51-48-51-48-51-48-51-49-51-48-51-48-51-48-51-48-51-48-51-48-51-48-51-48-51-48-51-49-51-48-51-48-51-48-51-48-51-48-51-48-51-48-51-48-51-49-51-48-51-48-51-48-51-48-51-49-51-48-51-48-51-49-51-48-51-48-51-48-51-48-51-49-51-48-51-49-51-48-")
                        elif sep_mes[1] == "mute":
                            rospy.logdebug("Living room tv volume mute!")
                            urlopen("http://172.22.0.166:8081/rest/runtime/model/components/67-111-109-109-97-110-100-73-110-112-117-116-/ports/105-110-/data/73-82-84-82-65-78-83-45-85-83-66-64-73-82-84-82-65-78-83-58-115-110-100-104-101-120-32-72-53-69-48-49-48-48-48-48-48-48-48-48-51-50-50-54-48-51-48-48-69-53-48-48-51-69-48-48-65-68-50-53-48-52-48-48-48-48-48-48-48-48-48-48-48-48-48-48-48-48-48-49-66-48-48-48-51-48-48-48-50-70-48-48-51-48-48-48-48-48-48-48-48-48-48-48-48-48-48-48-48-48-48-51-56-50-56-52-53-51-51-48-51-49-51-48-51-48-51-48-51-48-51-48-51-48-51-48-51-48-51-48-51-48-51-48-51-49-51-48-51-48-51-48-51-48-51-48-51-48-51-48-51-48-51-48-51-49-51-48-51-48-51-48-51-48-51-48-51-48-51-48-51-48-51-48-51-49-51-48-51-48-51-49-51-49-51-48-51-48-51-48-51-49-51-48-51-48-51-49-51-49-51-48-51-49-51-48-")
                        elif sep_mes[1] == "on" or sep_mes[1] == "off":
                            rospy.logdebug("Living room tv on/off!")
                            urlopen("http://172.22.0.166:8081/rest/runtime/model/components/67-111-109-109-97-110-100-73-110-112-117-116-/ports/105-110-/data/73-82-84-82-65-78-83-45-85-83-66-64-73-82-84-82-65-78-83-58-115-110-100-104-101-120-32-72-53-69-48-49-48-48-48-48-48-48-48-48-51-50-50-54-48-51-48-48-69-53-48-48-52-50-48-48-65-68-50-53-48-52-48-48-48-48-48-48-48-48-48-48-48-48-48-48-48-48-48-49-66-48-48-48-50-70-48-48-50-66-48-48-50-70-48-48-48-48-48-48-48-48-48-48-48-48-48-48-48-48-48-51-56-51-56-56-53-51-51-48-51-49-51-48-51-48-51-48-51-48-51-48-51-48-51-48-51-48-51-48-51-48-51-48-51-49-51-48-51-48-51-48-51-48-51-48-51-48-51-48-51-48-51-48-51-49-51-48-51-48-51-48-51-48-51-48-51-48-51-48-51-48-51-49-51-48-51-49-51-49-51-49-51-49-51-48-51-48-51-49-51-48-51-49-51-49-51-49-51-49-51-48-51-49-51-48-")
                    if sep_mes[0] == "bedroom":
                        if sep_mes[1] == "channel_up":
                            rospy.logdebug("Bedroom tv channel up!")
                            urlopen("http://172.22.0.166:8081/rest/runtime/model/components/67-111-109-109-97-110-100-73-110-112-117-116-/ports/105-110-/data/73-82-84-82-65-78-83-45-87-69-66-64-73-82-84-82-65-78-83-58-115-110-100-104-101-120-32-72-53-48-48-49-48-48-48-48-48-48-48-48-50-52-50-54-48-49-48-50-51-50-48-48-52-66-48-48-68-52-48-49-49-69-49-51-54-55-48-48-48-48-48-48-48-48-48-48-48-48-48-52-53-66-48-48-52-50-48-48-52-50-48-52-53-65-48-48-52-49-48-48-48-48-48-48-48-48-48-48-48-48-48-53-48-49-48-48-53-51-51-48-51-48-51-48-51-48-51-48-51-48-51-49-51-48-51-49-51-49-51-49-51-49-51-49-51-49-51-48-51-49-51-49-51-49-51-48-51-49-51-49-51-48-51-48-51-48-51-48-51-48-51-49-51-48-51-48-51-49-51-49-51-49-51-51-51-50-51-48-")
                        elif sep_mes[1] == "channel_down":
                            rospy.logdebug("Bedroom tv channel down!")
                            urlopen("http://172.22.0.166:8081/rest/runtime/model/components/67-111-109-109-97-110-100-73-110-112-117-116-/ports/105-110-/data/73-82-84-82-65-78-83-45-87-69-66-64-73-82-84-82-65-78-83-58-115-110-100-104-101-120-32-72-53-48-48-49-48-48-48-48-48-48-48-48-50-52-50-54-48-49-48-50-51-51-48-48-52-66-48-48-68-52-48-49-49-67-49-51-54-55-48-48-48-48-48-48-48-48-48-48-48-48-48-52-53-66-48-48-52-50-48-48-52-51-48-52-53-66-48-48-52-50-48-48-48-48-48-48-48-48-48-48-48-48-48-53-48-49-48-48-53-51-51-48-51-48-51-48-51-48-51-48-51-48-51-49-51-48-51-49-51-49-51-49-51-49-51-49-51-49-51-48-51-49-51-49-51-49-51-49-51-49-51-49-51-48-51-48-51-48-51-48-51-48-51-48-51-48-51-48-51-49-51-49-51-49-51-51-51-50-51-48-")
                        elif sep_mes[1] == "volume_up":
                            rospy.logdebug("Bedroom tv volume up!")
                            urlopen("http://172.22.0.166:8081/rest/runtime/model/components/67-111-109-109-97-110-100-73-110-112-117-116-/ports/105-110-/data/73-82-84-82-65-78-83-45-87-69-66-64-73-82-84-82-65-78-83-58-115-110-100-104-101-120-32-72-53-48-48-49-48-48-48-48-48-48-48-48-50-52-50-54-48-49-48-50-51-52-48-48-52-67-48-48-68-53-48-49-49-68-49-51-54-55-48-48-48-48-48-48-48-48-48-48-48-48-48-52-53-65-48-48-52-49-48-48-52-50-48-52-53-65-48-48-52-50-48-48-48-48-48-48-48-48-48-48-48-48-48-53-48-49-48-48-53-51-51-48-51-48-51-48-51-48-51-48-51-48-51-49-51-48-51-49-51-49-51-49-51-49-51-49-51-49-51-48-51-49-51-48-51-49-51-48-51-49-51-49-51-48-51-48-51-48-51-49-51-48-51-49-51-48-51-48-51-49-51-49-51-49-51-51-51-50-51-48-")
                        elif sep_mes[1] == "volume_down":
                            rospy.logdebug("Bedroom tv volume down!")
                            urlopen("http://172.22.0.166:8081/rest/runtime/model/components/67-111-109-109-97-110-100-73-110-112-117-116-/ports/105-110-/data/73-82-84-82-65-78-83-45-87-69-66-64-73-82-84-82-65-78-83-58-115-110-100-104-101-120-32-72-53-48-48-49-48-48-48-48-48-48-48-48-50-52-50-54-48-49-48-50-51-51-48-48-52-66-48-48-68-53-48-49-49-68-49-51-54-56-48-48-48-48-48-48-48-48-48-48-48-48-48-52-53-66-48-48-52-50-48-48-52-50-48-52-53-65-48-48-52-49-48-48-48-48-48-48-48-48-48-48-48-48-48-53-48-49-48-48-53-51-51-48-51-48-51-48-51-48-51-48-51-48-51-49-51-48-51-49-51-49-51-49-51-49-51-49-51-49-51-48-51-49-51-48-51-49-51-49-51-49-51-49-51-48-51-48-51-48-51-49-51-48-51-48-51-48-51-48-51-49-51-49-51-49-51-51-51-50-51-48-")
                        elif sep_mes[1] == "mute":
                            rospy.logdebug("Bedroom tv volume mute!")
                            urlopen("http://172.22.0.166:8081/rest/runtime/model/components/67-111-109-109-97-110-100-73-110-112-117-116-/ports/105-110-/data/73-82-84-82-65-78-83-45-87-69-66-64-73-82-84-82-65-78-83-58-115-110-100-104-101-120-32-72-53-48-48-49-48-48-48-48-48-48-48-48-50-52-50-54-48-49-48-50-51-52-48-48-52-66-48-48-68-53-48-49-49-68-49-51-54-55-48-48-48-48-48-48-48-48-48-48-48-48-48-52-53-65-48-48-52-50-48-48-52-50-48-52-53-65-48-48-52-50-48-48-48-48-48-48-48-48-48-48-48-48-48-53-48-49-48-48-53-51-51-48-51-48-51-48-51-48-51-48-51-48-51-49-51-48-51-49-51-49-51-49-51-49-51-49-51-49-51-48-51-49-51-48-51-48-51-48-51-48-51-49-51-48-51-48-51-48-51-49-51-49-51-49-51-49-51-48-51-49-51-49-51-49-51-51-51-50-51-48-")
                        elif sep_mes[1] == "on" or sep_mes[1] == "off":
                            rospy.logdebug("Bedroom tv on/off!")
                            urlopen("http://172.22.0.166:8081/rest/runtime/model/components/67-111-109-109-97-110-100-73-110-112-117-116-/ports/105-110-/data/73-82-84-82-65-78-83-45-87-69-66-64-73-82-84-82-65-78-83-58-115-110-100-104-101-120-32-72-53-48-48-49-48-48-48-48-48-48-48-48-50-52-50-54-48-49-48-50-51-51-48-48-52-66-48-48-68-52-48-49-49-68-49-51-54-55-48-48-48-48-48-48-48-48-48-48-48-48-48-52-53-65-48-48-52-50-48-48-52-51-48-52-53-65-48-48-52-50-48-48-48-48-48-48-48-48-48-48-48-48-48-53-48-49-48-48-53-51-51-48-51-48-51-48-51-48-51-48-51-48-51-49-51-48-51-49-51-49-51-49-51-49-51-49-51-49-51-48-51-49-51-48-51-49-51-48-51-48-51-49-51-48-51-48-51-48-51-49-51-48-51-49-51-49-51-48-51-49-51-49-51-49-51-51-51-50-51-48-")

                ################################ DVD Player ################################
                elif vc_input.intent == "dvd_player":
                    slot = vc_input.slots
                    if slot == "on" or slot == "off":
                        rospy.logdebug("DVD Player on/off")
                        urlopen("http://172.22.0.166:8081/rest/runtime/model/components/67-111-109-109-97-110-100-73-110-112-117-116-/ports/105-110-/data/73-82-84-82-65-78-83-45-87-69-66-64-73-82-84-82-65-78-83-58-115-110-100-104-101-120-32-72-53-48-48-49-48-48-48-48-48-48-48-48-50-52-50-54-48-49-48-50-51-51-48-48-52-66-48-48-68-52-48-49-49-68-49-51-54-55-48-48-48-48-48-48-48-48-48-48-48-48-48-52-53-65-48-48-52-50-48-48-52-51-48-52-53-65-48-48-52-50-48-48-48-48-48-48-48-48-48-48-48-48-48-53-48-49-48-48-53-51-51-48-51-48-51-48-51-48-51-48-51-48-51-49-51-48-51-49-51-49-51-49-51-49-51-49-51-49-51-48-51-49-51-48-51-49-51-48-51-48-51-49-51-48-51-48-51-48-51-49-51-48-51-49-51-49-51-48-51-49-51-49-51-49-51-51-51-50-51-48-")
                    elif slot == "pause" or slot == "play":
                        rospy.logdebug("DVD Player pause")
                        urlopen("http://172.22.0.166:8081/rest/runtime/model/components/67-111-109-109-97-110-100-73-110-112-117-116-/ports/105-110-/data/73-82-84-82-65-78-83-45-87-69-66-64-73-82-84-82-65-78-83-58-115-110-100-104-101-120-32-72-53-51-48-49-48-48-48-48-48-48-48-48-50-55-50-54-48-51-48-50-51-57-48-48-52-54-48-48-67-50-48-50-51-66-49-67-50-52-48-48-48-48-48-48-48-48-48-48-48-48-48-50-51-48-48-48-51-56-48-48-51-57-48-48-51-56-48-48-51-56-48-48-48-48-48-48-48-48-48-48-48-48-48-52-56-50-55-56-53-51-51-48-51-48-51-48-51-48-51-48-51-49-51-48-51-48-51-48-51-48-51-48-51-48-51-48-51-48-51-48-51-48-51-50-51-49-51-49-51-49-51-48-51-48-51-48-51-49-51-48-51-49-51-48-51-48-51-48-51-49-51-49-51-48-51-49-51-48-51-49-51-49-51-49-51-48-")
                    elif slot == "stop":
                        rospy.logdebug("DVD Player stop")
                        urlopen("http://172.22.0.166:8081/rest/runtime/model/components/67-111-109-109-97-110-100-73-110-112-117-116-/ports/105-110-/data/73-82-84-82-65-78-83-45-87-69-66-64-73-82-84-82-65-78-83-58-115-110-100-104-101-120-32-72-53-51-48-49-48-48-48-48-48-48-48-48-50-55-50-54-48-51-48-50-51-65-48-48-52-56-48-48-67-52-48-50-51-65-49-67-50-52-48-48-48-48-48-48-48-48-48-48-48-48-48-50-50-70-48-48-51-57-48-48-51-52-48-48-51-53-48-48-51-57-48-48-48-48-48-48-48-48-48-48-48-48-48-52-56-50-55-56-53-51-51-48-51-48-51-48-51-48-51-48-51-49-51-48-51-48-51-48-51-48-51-48-51-48-51-48-51-48-51-48-51-48-51-50-51-49-51-49-51-49-51-48-51-49-51-49-51-48-51-48-51-49-51-48-51-48-51-48-51-48-51-48-51-49-51-49-51-48-51-49-51-49-51-49-51-48-")

                ################################ HiFi ################################
                elif vc_input.intent == "hifi":
                    slot = vc_input.slots
                    if slot == "channel_up":
                        rospy.logdebug("HiFi channel up!")
                        urlopen("http://172.22.0.166:8081/rest/runtime/model/components/67-111-109-109-97-110-100-73-110-112-117-116-/ports/105-110-/data/73-82-84-82-65-78-83-45-87-69-66-64-73-82-84-82-65-78-83-58-115-110-100-104-101-120-32-72-53-48-48-49-48-48-48-48-48-48-48-48-50-52-50-53-48-49-48-50-51-51-48-48-52-54-48-48-68-51-48-49-49-65-49-52-48-50-48-48-48-48-48-48-48-48-48-48-48-48-48-52-54-52-48-48-52-56-48-48-52-55-48-52-54-53-48-48-52-55-48-48-48-48-48-48-48-48-48-48-48-48-48-53-48-49-48-48-53-51-51-49-51-49-51-49-51-49-51-49-51-49-51-49-51-48-51-49-51-48-51-48-51-48-51-48-51-48-51-48-51-48-51-49-51-49-51-48-51-49-51-49-51-48-51-49-51-48-51-48-51-48-51-49-51-48-51-48-51-49-51-48-51-48-51-51-51-50-51-48-")
                    elif slot == "channel_down":
                        rospy.logdebug("HiFi channel down!")
                        urlopen("http://172.22.0.166:8081/rest/runtime/model/components/67-111-109-109-97-110-100-73-110-112-117-116-/ports/105-110-/data/73-82-84-82-65-78-83-45-87-69-66-64-73-82-84-82-65-78-83-58-115-110-100-104-101-120-32-72-53-48-48-49-48-48-48-48-48-48-48-48-50-52-50-53-48-49-48-50-51-51-48-48-52-54-48-48-68-51-48-49-49-65-49-52-48-48-48-48-48-48-48-48-48-48-48-48-48-48-48-52-54-52-48-48-52-55-48-48-52-55-48-52-54-52-48-48-52-56-48-48-48-48-48-48-48-48-48-48-48-48-48-53-48-49-48-48-53-51-51-49-51-49-51-49-51-49-51-49-51-49-51-49-51-48-51-49-51-48-51-48-51-48-51-48-51-48-51-48-51-48-51-48-51-49-51-49-51-49-51-49-51-48-51-49-51-48-51-49-51-48-51-48-51-48-51-48-51-49-51-48-51-48-51-51-51-50-51-48-")
                    elif slot == "volume_up":
                        rospy.logdebug("HiFi volume up!")
                        urlopen("http://172.22.0.166:8081/rest/runtime/model/components/67-111-109-109-97-110-100-73-110-112-117-116-/ports/105-110-/data/73-82-84-82-65-78-83-45-87-69-66-64-73-82-84-82-65-78-83-58-115-110-100-104-101-120-32-72-53-48-48-49-48-48-48-48-48-48-48-48-50-52-50-54-48-49-48-50-51-55-48-48-52-51-48-48-68-49-48-49-49-68-49-51-55-50-48-48-48-48-48-48-48-48-48-48-48-48-48-52-54-48-48-48-52-66-48-48-52-57-48-52-54-49-48-48-52-65-48-48-48-48-48-48-48-48-48-48-48-48-48-53-48-49-48-48-53-51-51-48-51-49-51-48-51-49-51-49-51-49-51-49-51-48-51-49-51-48-51-49-51-48-51-48-51-48-51-48-51-49-51-48-51-49-51-48-51-49-51-49-51-48-51-48-51-48-51-49-51-48-51-49-51-48-51-48-51-49-51-49-51-49-51-51-51-50-51-48-")
                    elif slot == "volume_down":
                        rospy.logdebug("HiFi volume down!")
                        urlopen("http://172.22.0.166:8081/rest/runtime/model/components/67-111-109-109-97-110-100-73-110-112-117-116-/ports/105-110-/data/73-82-84-82-65-78-83-45-87-69-66-64-73-82-84-82-65-78-83-58-115-110-100-104-101-120-32-72-53-48-48-49-48-48-48-48-48-48-48-48-50-52-50-54-48-49-48-50-51-55-48-48-52-65-48-48-68-55-48-49-49-69-49-51-55-56-48-48-48-48-48-48-48-48-48-48-48-48-48-52-54-49-48-48-52-51-48-48-52-51-48-52-54-48-48-48-52-51-48-48-48-48-48-48-48-48-48-48-48-48-48-53-48-49-48-48-53-51-51-48-51-49-51-48-51-49-51-49-51-49-51-49-51-48-51-49-51-48-51-49-51-48-51-48-51-48-51-48-51-49-51-49-51-49-51-48-51-49-51-49-51-48-51-48-51-48-51-48-51-48-51-49-51-48-51-48-51-49-51-49-51-49-51-51-51-50-51-48-")
                    elif slot == "on" or slot == "off":
                        rospy.logdebug("Living room tv on/off!")
                        urlopen("http://172.22.0.166:8081/rest/runtime/model/components/67-111-109-109-97-110-100-73-110-112-117-116-/ports/105-110-/data/73-82-84-82-65-78-83-45-87-69-66-64-73-82-84-82-65-78-83-58-115-110-100-104-101-120-32-72-53-48-48-49-48-48-48-48-48-48-48-48-50-52-50-54-48-49-48-50-51-55-48-48-52-57-48-48-68-56-48-49-49-69-49-51-55-56-48-48-48-48-48-48-48-48-48-48-48-48-48-52-54-48-48-48-52-52-48-48-52-51-48-52-54-49-48-48-52-51-48-48-48-48-48-48-48-48-48-48-48-48-48-53-48-49-48-48-53-51-51-48-51-49-51-49-51-49-51-49-51-49-51-49-51-48-51-49-51-48-51-48-51-48-51-48-51-48-51-48-51-49-51-48-51-49-51-48-51-49-51-48-51-49-51-48-51-48-51-49-51-48-51-49-51-48-51-49-51-48-51-49-51-49-51-51-51-50-51-48-32-")
        except rospy.ROSException:
            rospy.logwarn("{%s} - Timeout occured within {%s} seconds!\n"
                , self.__class__.__name__, self._elapse_time)
            self._publish_speech_message("custom", "Ich habe dich nicht verstanden")

    def _choose_random_interaction_mode(self):
        mode = ["doa", "smart_home"]
        retVal = random.choice(mode)
        return retVal

    def _yes_no_keyboard_request(self):
        rospy.logdebug("{%s} - Waiting for yes or no!\n", self.__class__.__name__)
        retVal, keyboard_input = self._evaluate_keyboard_inputs()
        if retVal != True:
            return False
        else:
            keyboard_input.lower()
            if keyboard_input == "ja" or keyboard_input == 'yes':
                return True
            elif keyboard_input == "nein" or keyboard_input == 'no':
                return False

    def _evaluate_keyboard_inputs(self):
        keyboard_input = ""
        retString = ""
        start_time = self._time_request()
        try:
            while self._time_request() - start_time < self._elapse_time:
                keyboard_input = self._keyboard_queue.get(timeout = self._elapse_time)
                if keyboard_input == "enter":
                    rospy.logdebug("{%s} - Enter is pressed!\n", self.__class__.__name__)
                    return True, retString
                elif keyboard_input == "backspace":
                    retString = retString[:len(retString) - 1]
                    rospy.logdebug("{%s} - String after backspace: {%s}\n",
                        self.__class__.__name__, retString)
                elif keyboard_input == "space":
                    retString += " "
                else:
                    retString += keyboard_input
                    rospy.logdebug("{%s} - String: {%s}\n",
                        self.__class__.__name__, retString)
            else:
                rospy.logdebug("{%s} - Loop stopped since enter button not pressed!\n",
                    self.__class__.__name__)
                self._publish_speech_message("custom", "Du hast nicht enter getippt!")
                return False, None
        except Queue.Empty:
            rospy.logdebug("{%s} - Timeout occured within {%s} seconds!\n"
                , self.__class__.__name__, self._elapse_time)
            self._publish_speech_message("custom", "Du warst mit der eingabe zu langsam")
            return False, None

    def _time_request(self):
        return time()

    def _publish_speech_message(self, mode, text = None):
        self._msg_speech.mode = mode
        self._msg_speech.text = text
        self._pub_speech.publish(self._msg_speech)
        rospy.logdebug("{%s} - Speech published data: {%s}",
            self.__class__.__name__, str(self._msg_speech))

    def _publish_led_ears_message(self, random = "", repeat_num = [0, 0], rgb_color = []):
        self._msg_led_ears.random = random
        self._msg_led_ears.repeat_num = repeat_num
        self._msg_led_ears.rgb_color = rgb_color
        self._pub_led_ears.publish(self._msg_led_ears)
        rospy.logdebug("{%s} - Led Ears published data: {%s}",
            self.__class__.__name__, str(self._msg_led_ears))
