// Generated by gencpp from file robofriend/Coordinates.msg
// DO NOT EDIT!


#ifndef ROBOFRIEND_MESSAGE_COORDINATES_H
#define ROBOFRIEND_MESSAGE_COORDINATES_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace robofriend
{
template <class ContainerAllocator>
struct Coordinates_
{
  typedef Coordinates_<ContainerAllocator> Type;

  Coordinates_()
    : y_top(0)
    , right(0)
    , bottom(0)
    , x_left(0)
    , face_name()  {
    }
  Coordinates_(const ContainerAllocator& _alloc)
    : y_top(0)
    , right(0)
    , bottom(0)
    , x_left(0)
    , face_name(_alloc)  {
  (void)_alloc;
    }



   typedef uint16_t _y_top_type;
  _y_top_type y_top;

   typedef uint16_t _right_type;
  _right_type right;

   typedef uint16_t _bottom_type;
  _bottom_type bottom;

   typedef uint16_t _x_left_type;
  _x_left_type x_left;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _face_name_type;
  _face_name_type face_name;





  typedef boost::shared_ptr< ::robofriend::Coordinates_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robofriend::Coordinates_<ContainerAllocator> const> ConstPtr;

}; // struct Coordinates_

typedef ::robofriend::Coordinates_<std::allocator<void> > Coordinates;

typedef boost::shared_ptr< ::robofriend::Coordinates > CoordinatesPtr;
typedef boost::shared_ptr< ::robofriend::Coordinates const> CoordinatesConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robofriend::Coordinates_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robofriend::Coordinates_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace robofriend

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'robofriend': ['/home/pi/project/RoboFriend/src/Pi/catkin_ws/src/robofriend/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::robofriend::Coordinates_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robofriend::Coordinates_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robofriend::Coordinates_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robofriend::Coordinates_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robofriend::Coordinates_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robofriend::Coordinates_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robofriend::Coordinates_<ContainerAllocator> >
{
  static const char* value()
  {
    return "be7c1e838538f5e60d0dc085dffee546";
  }

  static const char* value(const ::robofriend::Coordinates_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xbe7c1e838538f5e6ULL;
  static const uint64_t static_value2 = 0x0d0dc085dffee546ULL;
};

template<class ContainerAllocator>
struct DataType< ::robofriend::Coordinates_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robofriend/Coordinates";
  }

  static const char* value(const ::robofriend::Coordinates_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robofriend::Coordinates_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint16 y_top\n\
uint16 right\n\
uint16 bottom\n\
uint16 x_left\n\
string face_name\n\
";
  }

  static const char* value(const ::robofriend::Coordinates_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robofriend::Coordinates_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.y_top);
      stream.next(m.right);
      stream.next(m.bottom);
      stream.next(m.x_left);
      stream.next(m.face_name);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Coordinates_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robofriend::Coordinates_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robofriend::Coordinates_<ContainerAllocator>& v)
  {
    s << indent << "y_top: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.y_top);
    s << indent << "right: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.right);
    s << indent << "bottom: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.bottom);
    s << indent << "x_left: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.x_left);
    s << indent << "face_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.face_name);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOFRIEND_MESSAGE_COORDINATES_H
